(function($){"use strict";$.bsColorPicker={setDefaults:function(options){this.DEFAULTS=$.extend(true,{},this.DEFAULTS,options||{})},getDefaults:function(){return this.DEFAULTS},DEFAULTS:{btnClass:"btn-outline-secondary",btnText:null,btnEmptyColor:"rgba(0, 0, 0, 0.5)",format:"rgba",disabled:false,icons:{check:"bi bi-check-lg",reset:"bi bi-arrow-clockwise",close:"bi bi-x-lg",empty:"bi bi-trash3"},debug:false},utils:{getValidOutputFormates(){return["rgba","rgb","hsl","hsla","hex"]},isValidOutputFormat(format){return this.getValidOutputFormates().includes(format.toLowerCase())},isValueEmpty(value){if(value===null||value===undefined){return true}if(Array.isArray(value)){return value.length===0}if(typeof value==="string"){return value.trim().length===0}return false},getMousePosition(e,canvas){const rect=canvas.getBoundingClientRect();const scaleX=canvas.width/rect.width;const scaleY=canvas.height/rect.height;const x=(e.clientX-rect.left)*scaleX;const y=(e.clientY-rect.top)*scaleY;return{x:x,y:y}},cmykToRGB({c,m,y,k}){c/=100;m/=100;y/=100;k/=100;const r=Math.round(255*(1-c)*(1-k));const g=Math.round(255*(1-m)*(1-k));const b=Math.round(255*(1-y)*(1-k));return{r:r,g:g,b:b}},hexToRGBA(hex){hex=hex.replace("#","");if(hex.length===3||hex.length===4){hex=hex.split("").map(h=>h+h).join("")}const r=parseInt(hex.slice(0,2),16);const g=parseInt(hex.slice(2,4),16);const b=parseInt(hex.slice(4,6),16);const a=hex.length===8?parseFloat((parseInt(hex.slice(6,8),16)/255).toFixed(2)):1;if(isNaN(r)||isNaN(g)||isNaN(b)||isNaN(a)){console.error("Invalid HEX format");return null}return{r:r,g:g,b:b,a:a}},RGBtoCMYK(r,g,b){r/=255;g/=255;b/=255;const k=1-Math.max(r,g,b);const c=(1-r-k)/(1-k)||0;const m=(1-g-k)/(1-k)||0;const y=(1-b-k)/(1-k)||0;return{c:Math.round(c*100),m:Math.round(m*100),y:Math.round(y*100),k:Math.round(k*100)}},RGBtoHSL(r,g,b){r/=255;g/=255;b/=255;const max=Math.max(r,g,b);const min=Math.min(r,g,b);let h,s,l=(max+min)/2;if(max===min){h=s=0}else{const d=max-min;s=l>.5?d/(2-max-min):d/(max+min);switch(max){case r:h=(g-b)/d+(g<b?6:0);break;case g:h=(b-r)/d+2;break;case b:h=(r-g)/d+4;break}h*=60}return{h:h,s:s,l:l}},hslToRGB({h,s,l},debug=false){if(debug){console.log("----------------- hslToRGB -----------------");console.log("Input:",{h:h,s:s,l:l})}let r,g,b;if(h===undefined||s===undefined||l===undefined){if(debug){console.error("UngÃ¼ltige HSL-Werte:",{h:h,s:s,l:l})}return{r:0,g:0,b:0}}if(s===0){r=g=b=l;if(debug){console.log("Grayscale:",{r:r,g:g,b:b})}}else{const hue2rgb=(p,q,t)=>{if(t<0)t+=1;if(t>1)t-=1;if(t<1/6)return p+(q-p)*6*t;if(t<1/2)return q;if(t<2/3)return p+(q-p)*(2/3-t)*6;return p};const q=l<.5?l*(1+s):l+s-l*s;const p=2*l-q;if(debug){console.log("Intermediate values:",{q:q,p:p})}r=hue2rgb(p,q,h/360+1/3);g=hue2rgb(p,q,h/360);b=hue2rgb(p,q,h/360-1/3);if(debug){console.log("Calculated RGB:",{r:r,g:g,b:b})}}const result={r:Math.round(r*255),g:Math.round(g*255),b:Math.round(b*255)};if(debug){console.log("Final RGB:",result);console.log("----------------- hslToRGB completed -----------------")}return result},RGBtoHSV(r,g,b){r/=255;g/=255;b/=255;const max=Math.max(r,g,b);const min=Math.min(r,g,b);const d=max-min;let h,s=max===0?0:d/max,v=max;if(max===min){h=0}else{switch(max){case r:h=(g-b)/d+(g<b?6:0);break;case g:h=(b-r)/d+2;break;case b:h=(r-g)/d+4;break}h*=60}return{h:h,s:s,v:v}},HSVtoRGB(h,s,v){let r,g,b;const i=Math.floor(h/60);const f=h/60-i;const p=v*(1-s);const q=v*(1-f*s);const t=v*(1-(1-f)*s);switch(i%6){case 0:r=v;g=t;b=p;break;case 1:r=q;g=v;b=p;break;case 2:r=p;g=v;b=t;break;case 3:r=p;g=q;b=v;break;case 4:r=t;g=p;b=v;break;case 5:r=v;g=p;b=q;break}return{r:Math.round(r*255),g:Math.round(g*255),b:Math.round(b*255)}},RGBtoHex(r,g,b,a=1){const toHex=n=>{const hex=Math.round(n).toString(16);return hex.length===1?"0"+hex:hex};const hexColor=`#${toHex(r)}${toHex(g)}${toHex(b)}`;if(a<1){const alphaHex=toHex(Math.round(a*255));return hexColor+alphaHex}return hexColor},getColorNames(){return{aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"}},colorNameToHex(colorName){const color=colorName.toLowerCase();const colorNames=this.getColorNames();if(colorNames[color]){return colorNames[color]}return null},convertColorFormats(customColor,debug=false){if(debug){console.log("----------------- convertColorFormats -----------------");console.log("convertColorFormats",customColor)}if(!customColor){return null}try{let rgb=null;let rgba=null;let hsv=null;let hsl=null;let hsla=null;let alpha=1;if(typeof customColor==="string"){if(debug){console.log("customColor is a string",customColor)}customColor=customColor.trim();if(customColor.startsWith("rbga")){customColor=customColor.replace("rbga","rgba");if(debug){console.warn("Corrected minor typo: rbga -> rgba",customColor)}}if(customColor.startsWith("#")){if(debug){console.log("customColor starts with #")}const testHex=$.bsColorPicker.utils.hexToRGBA(customColor);if(testHex){rgb={r:testHex.r,g:testHex.g,b:testHex.b};rgba={...rgb,a:testHex.a};alpha=testHex.a;if(debug){console.log("hex -> rgb =",rgb);console.log("hex -> rgba =",rgba);console.log("hex -> alpha =",alpha)}}}else if(customColor.includes(",")){if(debug){console.log("customColor includes ,")}const rgbaMatch=customColor.match(/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*((?:0?\.\d+)|1|0)\s*)?\)/);if(rgbaMatch){const r=parseInt(rgbaMatch[1]);const g=parseInt(rgbaMatch[2]);const b=parseInt(rgbaMatch[3]);const a=rgbaMatch[4]!==undefined&&!isNaN(parseFloat(rgbaMatch[4]))?parseFloat(rgbaMatch[4]):1;if(r<0||r>255||g<0||g>255||b<0||b>255||a<0||a>1){console.error("RGBA values out of range:",rgbaMatch);return null}if(debug){console.log("RGBA values:",{r:r,g:g,b:b,a:a})}alpha=parseFloat(a.toFixed(2));rgb={r:r,g:g,b:b};rgba={...rgb,a:alpha}}else{const hslaMatch=customColor.match(/hsla?\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(?:,\s*(0|0?\.\d+|1))?\)/);if(hslaMatch){const h=parseInt(hslaMatch[1],10);const s=parseInt(hslaMatch[2],10)/100;const l=parseInt(hslaMatch[3],10)/100;const a=hslaMatch[4]!==undefined&&!isNaN(parseFloat(hslaMatch[4]))?parseFloat(hslaMatch[4]):1;if(h<0||h>=360||s<0||s>1||l<0||l>1||a<0||a>1){console.error("HSLA values out of range:",hslaMatch);return null}if(debug){console.log("HSLA values:",{h:h,s:s,l:l,a:a})}alpha=parseFloat(a.toFixed(2));hsl={h:h,s:s,l:l};hsla={...hsl,a:alpha};if(debug){console.log("hsla -> hsl =",hsl);console.log("hsla -> alpha =",hsla.a)}rgb=$.bsColorPicker.utils.hslToRGB(hsl,debug);if(rgb){rgba={...rgb,a:alpha};if(debug){console.log("hsl -> rgb =",rgb);console.log("hsla -> rgba =",rgba)}}}}}else{if(debug){console.log("customColor is a unknown string")}const namedColorHex=this.colorNameToHex(customColor);if(namedColorHex){return this.convertColorFormats(namedColorHex,debug)}const temp=document.createElement("div");temp.style.color=customColor;document.body.appendChild(temp);const computedColor=window.getComputedStyle(temp).color;document.body.removeChild(temp);if(debug){console.log("computedColor:",computedColor)}if(!computedColor||computedColor===customColor){console.error("Potential infinite loop detected. Aborting.");return null}return this.convertColorFormats(computedColor,debug)}}if(rgb&&!hsv){hsv=$.bsColorPicker.utils.RGBtoHSV(rgb.r,rgb.g,rgb.b);if(debug){console.log("rgb -> hsv =",hsv)}}if(rgb&&!hsl){hsl=$.bsColorPicker.utils.RGBtoHSL(rgb.r,rgb.g,rgb.b);hsla={...hsl,a:alpha};if(debug){console.log("rgb -> hsl =",hsl);console.log("rgb -> hsla =",hsla)}}const cmyk=rgb?$.bsColorPicker.utils.RGBtoCMYK(rgb.r,rgb.g,rgb.b):null;if(debug){console.log("rgb -> cmyk =",cmyk)}const hex=rgba?$.bsColorPicker.utils.RGBtoHex(rgba.r,rgba.g,rgba.b,rgba.a):null;if(debug){console.log("rgb -> hex =",hex)}const returnData={hex:hex,rgb:rgb,rgba:rgba,hsv:hsv,hsl:hsl,hsla:hsla,cmyk:cmyk,alpha:alpha};if(debug){console.log("returnData =",returnData);console.log("----------------- convertColorFormats completed -----------------")}return returnData}catch(e){if(debug){console.error("Invalid color format in function convertColorFormats:",e);console.log("----------------- convertColorFormats completed -----------------")}return null}}}};const fallbackFormat="rgba";const classDropdown="bs-color-picker-dropdown";const classDropdownButton="bs-color-picker-dropdown-button";const classElement="bs-color-picker-element";const submitBtnClass="bs-color-picker-btn-submit";const classCanvas="bs-color-picker-canvas";const classInputs="bs-color-picker-inputs";const markerClass="bs-color-picker-marker";const previewClass="bs-color-picker-preview";const brightnessSliderClass="bs-color-picker-brightness-slider";const opacitySliderClass="bs-color-picker-opacity-slider";$.fn.bsColorPicker=function(optionsOrMethod,params){if(this.length===0){return this}if($(this).length>1){return $(this).each(function(i,el){return $(el).bsColorPicker(optionsOrMethod,params)})}const optionsGiven=typeof optionsOrMethod==="object";const methodGiven=typeof optionsOrMethod==="string";const $element=$(this);let settings;let isInitialized=$element.data("initBsColorPicker")===true;let updateOptionAgain=isInitialized&&optionsGiven;if(!isInitialized){$element.addClass(classElement);$element.data("initBsColorPicker",true);if(!$element.data("before")){$element.data("before",{type:$element.attr("type")})}settings=$.bsColorPicker.getDefaults();const dataAttributes=$element.data();if(dataAttributes||optionsGiven){settings=$.extend(true,{},settings,optionsOrMethod||{},dataAttributes||{})}setSettings($element,settings);const vars={bootstrapVersion:getBootstrapVersion(),size:200,previewSize:50,sliderWidth:14,padding:10,currentHue:0,currentOpacity:1,currentSaturation:1,currentValue:1,activeControl:null};$element.data("vars",vars);if($element.is("input")&&$element.attr("type")!=="hidden"){$element.attr("type","hidden")}init($element).then(()=>{if(!$element.data("ignoreEvents")){trigger($element,"init")}else{$element.removeData("ignoreEvents")}if(settings.debug){log("Init completed")}})}else{settings=getSettings($element)}let returnValue=$element;if(updateOptionAgain){$element.data("ignoreEvents",true);methodUpdateOptions($element,optionsOrMethod)}else if(methodGiven){switch(optionsOrMethod){case"val":{const set=!$.bsColorPicker.utils.isValueEmpty(params);if(set){setValue($element,params,true,true)}else{returnValue=getOutputFormat($element)}break}case"getColor":{const selectedColorSet=$element.data("selected");returnValue=selectedColorSet||null;break}case"updateOptions":{$element.data("ignoreEvents",true);methodUpdateOptions($element,params);break}case"destroy":{destroy($element,true);break}default:{trigger($element,"error","Unknown method: "+optionsOrMethod);break}}}return returnValue};function destroy($element,makeVisible){const settings=getSettings($element);if(settings.debug){log("destroy called")}const dropdown=getDropdown($element);if(dropdown&&dropdown.length>0){if(settings.debug){log("Dropdown found. Remove the item and the dropdown.")}dropdown.before($element);dropdown.remove()}else{if(settings.debug){log("No dropdown found for the item.")}}if(makeVisible){const before=$element.data("before");$element.attr("type",before.type).show();$element.removeData("before")}$element.removeClass(classElement);$element.removeData("initBsColorPicker");$element.removeData("vars");$element.removeData("settings");if(settings.debug){log("Element has been completely reset:",$element)}}function methodUpdateOptions($element,options){let settings=getSettings($element);const debug=settings.debug;if(debug){log("updateOptions called",options)}if(typeof options==="object"){if(options.hasOwnProperty("debug")&&typeof options.debug==="boolean"){settings.debug=options.debug;setSettings($element,settings);settings=getSettings($element)}if(options.hasOwnProperty("format")){const newFormat=options.format.toLowerCase();if($.bsColorPicker.utils.isValidOutputFormat(options.format)){if(settings.format!==newFormat){settings.format=newFormat;setSettings($element,settings);let newValue=getOutputFormat($element);if(settings.debug){log(`setValue newValue to format (${newFormat}) =`,newValue)}$element.val(newValue);trigger($element,"change",newValue);settings=getSettings($element)}else{if(debug){log("format is already set to",settings.format)}}settings.format=options.format.toLowerCase();setSettings($element,settings);settings=getSettings($element)}else{trigger($element,"error","Invalid format. Please use one of the following: "+$.bsColorPicker.utils.getValidOutputFormates().join(", "));if(debug){log("Invalid format:",options.format)}}}if(options.hasOwnProperty("btnText")){settings.btnText=options.btnText;setSettings($element,settings);getDropdownButton($element).find("."+classDropdownButton).html(settings.btnText||"");settings=getSettings($element)}if(options.hasOwnProperty("btnClass")){const btnClassBefore=settings.btnClass;settings.btnClass=options.btnClass;setSettings($element,settings);getDropdownButton($element).removeClass(btnClassBefore).addClass(settings.btnClass);settings=getSettings($element)}if(options.hasOwnProperty("disabled")&&typeof options.disabled==="boolean"){settings.disabled=options.disabled;setSettings($element,settings);if(settings.disabled){getDropdownButton($element).not(".disabled").addClass("disabled");$element.attr("disabled","disabled")}else{getDropdownButton($element).removeClass("disabled");$element.removeAttr("disabled")}settings=getSettings($element)}}else{trigger($element,"error","Invalid options on method updateOptions. Options must be an object.")}if(debug){log("updateOptions completed")}}function getValueFromElement($element){const settings=getSettings($element);if(settings.debug){log("getValueFromElement called")}const value=$element.attr("value");if(settings.debug){log("getValueFromElement value =",value)}const returnValue=$.bsColorPicker.utils.isValueEmpty(value)?null:value;if(settings.debug){log("getValueFromElement returnValue =",returnValue);log("getValueFromElement completed")}return returnValue}function log(message,...params){if(window.console&&window.console.log){window.console.log("bsColorPicker LOG: "+message,...params)}}function calcTotalWidth($element){const settings=getSettings($element);if(settings.debug){log("calcTotalWidth called")}const vars=getVars($element);const total=vars.previewSize+vars.padding+vars.size+vars.padding+vars.sliderWidth+vars.padding+vars.sliderWidth;if(settings.debug){log("calcTotalWidth total =",total);log("calcTotalWidth completed")}return total}function setSettings($element,settings){if(settings.debug){log("setSettings called",settings)}if(!settings.hasOwnProperty("format")||!$.bsColorPicker.utils.isValidOutputFormat(settings.format)){settings.format=fallbackFormat}$element.data("settings",settings);if(settings.debug){log("setSettings completed")}}function getSettings($element){return $element.data("settings")}function setVar($element,prop,value){const settings=getSettings($element);if(settings.debug){log("setVar called")}const vars=getVars($element);vars[prop]=value;if(settings.debug){log("Set var",prop,"=",value,"vars =",vars)}$element.data("vars",vars);if(settings.debug){log("setVar completed")}}function getVars($element){return $element.data("vars")}function getDropdown($element){return $element.closest("."+classDropdown)}function getDropdownButton($element){return getDropdown($element).find(".dropdown-toggle")}function getCanvas($element){return getDropdown($element).find(`.${classCanvas}`)}function getCanvasContext($element){return getCanvas($element).get(0).getContext("2d")}function resetColor($element,closeOpenDropdown=false,triggerEvent=null){const settings=getSettings($element);const dropdown=getDropdown($element);if(settings.debug){log("resetColor called",closeOpenDropdown)}const value=getValueFromElement($element);if(settings.debug){log("resetColor value =",value)}setValue($element,value,false,false);if(closeOpenDropdown){closeDropdown($element,dropdown)}if(triggerEvent){trigger($element,triggerEvent,$element.data("selected"))}if(settings.debug){log("resetColor completed")}}function closeDropdown($element,$dropdown){trigger($element,"hide");const settings=getSettings($element);if(settings.debug){log("closeDropdown called")}$dropdown.removeClass("show").find(".dropdown-menu").removeClass("show");$dropdown.find(".dropdown-toggle").removeClass("show").attr("aria-expanded","false");$dropdown.find("[data-bs-popper]").removeAttr("data-bs-popper");if($dropdown.data("bs.dropdown")){$dropdown.data("bs.dropdown").dispose()}if(settings.debug){log("closeDropdown completed")}trigger($element,"hidden")}function closeOtherDropdowns($self){console.log("closeOtherDropdowns called");console.log("closeOtherDropdowns $self =",$self);const $dropdowns=$(document).find("."+classDropdown).not($self);console.log("closeOtherDropdowns other =",$dropdowns.length);$dropdowns.each(function(i,dropdown){const $dropdown=$(dropdown);const $element=$dropdown.find("."+classElement);closeDropdown($element,$dropdown)})}function setColorOnElement($element){const settings=getSettings($element);if(settings.debug){log("setColorOnElement called")}const dropdown=getDropdown($element);const outputFormat=getOutputFormat($element);setValue($element,outputFormat,true,true);closeDropdown($element,dropdown);if(settings.debug){log("setColorOnElement completed")}}function formatSelectedToString(details){if(!details){console.error("formatSelectedToString: No color data provided",details);return{}}const{hex,rgb,rgba,hsl,hsla}=details;const result={};if(hex){result.hex=`${hex}`}if(rgb){const r=Math.round(rgb.r);const g=Math.round(rgb.g);const b=Math.round(rgb.b);result.rgb=`rgb(${r}, ${g}, ${b})`}if(rgba){const r=Math.round(rgba.r);const g=Math.round(rgba.g);const b=Math.round(rgba.b);const a=parseFloat(rgba.a.toFixed(2));result.rgba=`rgba(${r}, ${g}, ${b}, ${a})`}if(hsl){const h=Math.round(hsl.h);const s=Math.round(hsl.s*100);const l=Math.round(hsl.l*100);const a=hsl.a!==undefined?parseFloat(hsl.a.toFixed(2)):1;result.hsl=`hsl(${h}, ${s}%, ${l}%)`;result.hsla=`hsla(${h}, ${s}%, ${l}%, ${a})`}return result}async function setValue($element,value,triggerChange=true,updateButton=false){const settings=getSettings($element);let success=false;if(settings.debug){log("setValue called",value)}try{if(value){const color=$.bsColorPicker.utils.convertColorFormats(value,settings.debug);if(settings.debug){log("setValue color =",color)}if(color){setVar($element,"currentOpacity",parseFloat(color.alpha.toFixed(2)));setVar($element,"currentHue",color.hsv.h);setVar($element,"currentSaturation",color.hsv.s);setVar($element,"currentValue",color.hsv.v);await updateColor($element,false);updateAllInputs($element,color);if(updateButton){updateButtonColor($element,value)}let newValue=getOutputFormat($element);if(settings.debug){log(`setValue newValue to format (${settings.format}) =`,newValue)}$element.val(newValue);success=true}else{if(settings.debug){log("setValue color is null")}trigger($element,"error","Invalid color format, set color to null");updateColorToNull($element,triggerChange,updateButton)}}else{updateColorToNull($element,triggerChange,updateButton);success=true}}catch(error){console.error("Error in setValue:",error);trigger($element,"error",error)}if(success&&triggerChange){trigger($element,"change",value)}if(settings.debug){log("setValue completed")}}async function init($element){const settings=getSettings($element);if(settings.debug){log("init called")}return new Promise(resolve=>{if(settings.debug){log("Hide original element")}$element.hide();if(settings.debug){log("Build dropdown")}buildDropdown($element);if(settings.debug){log("Bind event listeners")}events($element);const value=getValueFromElement($element);if(settings.debug){log("Set initial value:",value)}setValue($element,value,false,true);if(settings.debug){log("init completed")}resolve()})}function events($element){const settings=getSettings($element);if(settings.debug){log("events called")}const dropdown=getDropdown($element);dropdown.on("click","."+submitBtnClass,function(e){e.preventDefault();setColorOnElement($element)}).on("keydown","."+classInputs,function(e){if(e.key==="Enter"||e.keyCode===13){e.preventDefault();const $input=$(e.currentTarget);updateFromInput($element,$input)}}).on("change blur","."+classInputs,function(e){const $input=$(e.currentTarget);updateFromInput($element,$input)}).on("hide.bs.dropdown",function(e){const isInsideCanvas=dropdown.data("isInsideCanvas");const vars=getVars($element);if(isInsideCanvas||dropdown.data("autoClose")===false&&vars.bootstrapVersion<5){if(isInsideCanvas){dropdown.removeData("isInsideCanvas")}e.preventDefault();return}trigger($element,"hide")}).on("show.bs.dropdown",function(e){if(settings.debug){log("Dropdown show, close other dropdowns")}trigger($element,"show");const dropdown=$(e.currentTarget);closeOtherDropdowns(dropdown)}).on("shown.bs.dropdown",async function(e){if(settings.debug){log("Dropdown is shown, initializing canvas")}trigger($element,"shown");const currentElementValue=getValueFromElement($element);const vars=getVars($element);const canvas=getCanvas($element).get(0);canvas.width=calcTotalWidth($element);canvas.height=vars.size;if(!$.bsColorPicker.utils.isValueEmpty(currentElementValue)){await updateColor($element,false)}else{updateColorToNull($element,false,false)}}).on("mousedown","."+classCanvas,function(e){dropdown.data("isInsideCanvas",true);if(settings.debug){log("event mousedown on",classCanvas,$element)}const pos=$.bsColorPicker.utils.getMousePosition(e,e.currentTarget);const area=getClickedArea($element,pos.x);setVar($element,"activeControl",area);if(area==="color"){handleColorAreaClick($element,pos)}else if(area==="hue"){handleHueClick($element,pos)}else if(area==="opacity"){handleOpacityClick($element,pos)}});$(document).on("mousemove.bs.colorPicker",function(e){if(!isColorPickerInDOM($element)){removeEventListeners();return}const vars=getVars($element);const activeControl=vars.activeControl;if(!activeControl)return;const drop=getDropdown($element);if(!drop.length)return;const canvas=getCanvas($element).get(0);const pos=$.bsColorPicker.utils.getMousePosition(e,canvas);if(activeControl==="color"){handleColorAreaClick($element,pos)}else if(activeControl==="hue"){handleHueClick($element,pos)}else if(activeControl==="opacity"){handleOpacityClick($element,pos)}}).on("mouseup.bs.colorPicker",function(){if(!isColorPickerInDOM($element)){removeEventListeners();return}const vars=getVars($element);const activeControl=vars.activeControl;if(!activeControl)return;const drop=getDropdown($element);if(!drop.length)return;setVar($element,"activeControl",null)})}function removeEventListeners(){$(document).off(".bs.colorPicker")}function isColorPickerInDOM($element){return $.contains(document,$element[0])}function getBootstrapVersion(){if(typeof $.fn.modal==="undefined"||typeof $.fn.modal.Constructor==="undefined"){console.error("Bootstrap Modal Plugin ist nicht verfÃ¼gbar");return}const bootstrapVersion=$.fn.modal.Constructor.VERSION;return parseInt(bootstrapVersion.split(".")[0])}function buildDropdown($element){const vars=getVars($element);const canvasTotalWidth=calcTotalWidth($element);const settings=getSettings($element);const disabled=settings.disabled||$element.prop("disabled")?"disabled":"";const dropdown=$("<div>",{class:`${classDropdown} dropdown`}).insertAfter($element);dropdown.data("autoClose",false);$element.appendTo(dropdown);let btnText=settings.btnText?settings.btnText:"";const button=$("<button>",{html:['<div class="d-flex align-items-center" style="width: 100%; flex-wrap: nowrap;">','<div style="width:20px; height:20px; position:relative; flex-shrink: 0;" class="mr-1 me-1 rounded-circle shadow">','<canvas width="20" height="20" style="position:absolute; border-radius:50%; top:0; left:0;"></canvas>',"</div>",`<div class="mx-1 text-wrap text-start ${classDropdownButton}" style="flex: 1; min-width: 0;">${btnText}</div>`,"</div>"].join(""),type:"button",class:`btn dropdown-toggle ${settings.btnClass} d-flex align-items-center ${disabled}`,"data-toggle":"dropdown","data-bs-toggle":"dropdown","data-bs-auto-close":"false","aria-expanded":false}).appendTo(dropdown);const dropdownMenu=$("<div>",{class:"dropdown-menu p-3"}).appendTo(dropdown);const $colorContainer=$("<div>",{class:"d-flex p-0 flex-wrap",css:{height:"auto",width:"auto"}}).appendTo(dropdownMenu);const canvas=$("<canvas>",{css:{width:`${canvasTotalWidth}px`,height:`${vars.size}px`,boxSizing:"border-box",border:"none",padding:0,margin:0},class:classCanvas,width:canvasTotalWidth,height:vars.size}).appendTo($colorContainer);const $inputsContainer=$("<div>",{class:"p-2 d-flex flex-column align-items-center w-100"}).appendTo($colorContainer);createInputGroup("HEX","#ff0000",$inputsContainer);createInputGroup("RGBA","255, 0, 0",$inputsContainer);createInputGroup("CMYK","0, 100, 100, 0",$inputsContainer);createInputGroup("HSV","0, 100, 100",$inputsContainer);createInputGroup("HSLA","0, 100, 50",$inputsContainer);const $controllContainer=$("<div>",{class:"d-flex mt-2 btn-group w-100 btn-group-sm justify-content-between align-items-center"}).appendTo($inputsContainer);$("<button>",{html:`<i class="${settings.icons.close}"></i>`,type:"button",class:"btn",click:function(){resetColor($element,true,"cancel")}}).appendTo($controllContainer);$("<button>",{html:`<i class="${settings.icons.empty}"></i>`,type:"button",class:"btn",click:function(){setValue($element,null,false,false);trigger($element,"empty")}}).appendTo($controllContainer);$("<button>",{html:`<i class="${settings.icons.reset}"></i>`,type:"button",class:"btn",click:function(){resetColor($element,false,"reset")}}).appendTo($controllContainer);$("<button>",{html:`<i class="${settings.icons.check}"></i>`,type:"button",class:"btn "+submitBtnClass}).appendTo($controllContainer)}function updateButtonColor($element,colorValue){const dropdown=getDropdown($element);const settings=getSettings($element);const btn=dropdown.find(".dropdown-toggle");const canvas=btn.find("canvas").get(0);if(canvas&&canvas.getContext){const ctx=canvas.getContext("2d");const size=canvas.width;const tileSize=4;for(let x=0;x<size;x+=tileSize){for(let y=0;y<size;y+=tileSize){ctx.fillStyle=(x/tileSize+y/tileSize)%2===0?"#eee":"#ddd";ctx.fillRect(x,y,tileSize,tileSize)}}const color=$.bsColorPicker.utils.convertColorFormats(colorValue,settings.debug);let fillStyle;if(color&&color.rgba){fillStyle=`rgba(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b}, ${color.rgba.a})`}else{fillStyle=settings.btnEmptyColor}ctx.fillStyle=fillStyle;ctx.fillRect(0,0,size,size)}}function createInputGroup(label,placeholder,$inputsContainer){const $inputGroup=$("<div>",{class:"d-flex align-items-center mb-1"}).appendTo($inputsContainer);$("<label>",{style:"width: 60px; font-size: .8rem",class:"text-right pe-2 pr-2 text-muted mb-0 text-uppercase",text:label}).appendTo($inputGroup);$("<input>",{css:{border:"none",borderWidth:"0 0 1px 0",borderStyle:"solid",borderRadius:"0"},"data-role":label.toLowerCase(),type:"text",class:"form-control py-0 form-control-sm "+classInputs,placeholder:placeholder}).appendTo($inputGroup)}function trigger($element,event,...params){const settings=getSettings($element);const p=params&&params.length>0?params:[];if(settings.debug){if(p.length>0){log("Triggering event:",event,"with params:",...p)}else{log("Triggering event:",event,"without params")}}if(event!=="all"){$element.trigger("all.bs.colorPicker");$element.trigger(`${event}.bs.colorPicker`,...p)}}function updateColor($element,doTrigger=true){return new Promise((resolve,reject)=>{try{if(!$element||!$element.length){throw new Error("Invalid element parameter!")}const canvas=getCanvas($element).get(0);const context=getCanvasContext($element);if(!canvas){throw new Error("Canvas element not found!")}if(!context){throw new Error("Canvas context could not be retrieved!")}const totalWidth=calcTotalWidth($element);const vars=getVars($element);const settings=getSettings($element);if(!vars||typeof vars!=="object"){throw new Error("Failed to retrieve color picker variables!")}if(!settings||typeof settings!=="object"){throw new Error("Failed to retrieve color picker settings!")}context.clearRect(0,0,totalWidth,vars.size);const rgb=$.bsColorPicker.utils.HSVtoRGB(vars.currentHue,vars.currentSaturation,vars.currentValue);if(!rgb||typeof rgb.r!=="number"||typeof rgb.g!=="number"||typeof rgb.b!=="number"){throw new Error("Failed to convert HSV to RGB!")}const rgbaColor=`rgba(${rgb.r},${rgb.g},${rgb.b},${vars.currentOpacity})`;drawPreview($element,rgbaColor);drawMainSquare($element,vars.currentHue);drawHueSlider($element);drawOpacitySlider($element);const mainX=vars.previewSize+vars.padding+vars.currentSaturation*vars.size;const mainY=(1-vars.currentValue)*vars.size;drawMarker($element,mainX,mainY);const hueY=vars.currentHue/360*vars.size;drawMarker($element,vars.previewSize+vars.padding+vars.size+vars.padding+vars.sliderWidth/2,hueY,true);const opacityY=(1-vars.currentOpacity)*vars.size;drawMarker($element,vars.previewSize+vars.padding+vars.size+vars.padding+vars.sliderWidth+vars.padding+vars.sliderWidth/2,opacityY,true);const data=$.bsColorPicker.utils.convertColorFormats(`rgba(${rgb.r},${rgb.g},${rgb.b},${vars.currentOpacity})`,settings.debug);if(!data){throw new Error("Failed to convert color formats!")}$element.data("selected",data);if(doTrigger){trigger($element,"update",data)}updateAllInputs($element,data);resolve(data)}catch(error){console.error("Error in updateColor:",error);reject(error)}})}function updateColorToNull($element,doTrigger=true,updateBtn=false){const settings=getSettings($element);setVar($element,"currentOpacity",1);setVar($element,"currentHue",0);setVar($element,"currentSaturation",1);setVar($element,"currentValue",1);const canvas=getCanvas($element).get(0);const context=getCanvasContext($element);const totalWidth=calcTotalWidth($element);const vars=getVars($element);context.clearRect(0,0,totalWidth,vars.size);drawPreview($element,null);drawMainSquare($element,null,true);drawHueSlider($element);drawOpacitySlider($element);$element.removeData("selected");updateAllInputs($element,null);if(updateBtn){updateButtonColor($element,settings.btnEmptyColor)}$element.val(null);if(doTrigger){trigger($element,"update",null)}updateAllInputs($element,null)}function getOutputFormat($element){const selectedColorSet=$element.data("selected");if(!selectedColorSet){return null}const settings=getSettings($element);const strings=formatSelectedToString(selectedColorSet);if(settings.debug){log("setValue strings =",strings)}let newValue;switch(settings.format){case"hex":newValue=strings.hex;break;case"rgb":newValue=strings.rgb;break;case"rgba":newValue=strings.rgba;break;case"hsl":newValue=strings.hsl;break;case"hsla":newValue=strings.hsla;break;default:newValue=null;break}return newValue}function drawPreview($element,color){const settings=getSettings($element);const context=getCanvasContext($element);const vars=getVars($element);const previewSize=vars.previewSize;if($.bsColorPicker.utils.isValueEmpty(color)){drawTransparentBackground(context,0,0,vars.previewSize,vars.previewSize)}else{for(let x=0;x<previewSize;x+=10){for(let y=0;y<previewSize;y+=10){context.fillStyle=(x+y)%20===0?"#fff":"#eee";context.fillRect(x,y,10,10)}}context.fillStyle=color;context.fillRect(0,0,previewSize,previewSize)}}function drawMainSquare($element,baseHue,setEmpty=false){const context=getCanvasContext($element);const vars=getVars($element);const size=vars.size;if(setEmpty){drawTransparentBackground(context,vars.previewSize+vars.padding,0,size,size)}else{const imageData=context.createImageData(size,size);for(let y=0;y<size;y++){for(let x=0;x<size;x++){const s=x/(size-1);const v=1-y/(size-1);const rgb=$.bsColorPicker.utils.HSVtoRGB(baseHue,s,v);const idx=(y*size+x)*4;imageData.data[idx]=rgb.r;imageData.data[idx+1]=rgb.g;imageData.data[idx+2]=rgb.b;imageData.data[idx+3]=255}}context.putImageData(imageData,vars.previewSize+vars.padding,0)}}function drawTransparentBackground(context,startX,startY,width,height){const tileSize=10;const lightColor="#ffffff";const darkColor="#cccccc";for(let y=startY;y<startY+height;y+=tileSize){for(let x=startX;x<startX+width;x+=tileSize){if((x/tileSize+y/tileSize)%2===0){context.fillStyle=lightColor}else{context.fillStyle=darkColor}context.fillRect(x,y,tileSize,tileSize)}}}function drawHueSlider($element){const context=getCanvasContext($element);const vars=getVars($element);const size=vars.size;const sliderWidth=vars.sliderWidth;const imageData=context.createImageData(sliderWidth,size);for(let y=0;y<size;y++){const hue=y/(size-1)*360;const rgb=$.bsColorPicker.utils.HSVtoRGB(hue,1,1);for(let x=0;x<sliderWidth;x++){const idx=(y*sliderWidth+x)*4;imageData.data[idx]=rgb.r;imageData.data[idx+1]=rgb.g;imageData.data[idx+2]=rgb.b;imageData.data[idx+3]=255}}context.putImageData(imageData,vars.previewSize+vars.padding+size+vars.padding,0)}function drawOpacitySlider($element){try{const context=getCanvasContext($element);if(!context){throw new Error("Canvas context could not be retrieved.")}const vars=getVars($element);if(!vars||typeof vars!=="object"){throw new Error("Variables for the slider are missing or invalid.")}const colorFieldWidthHeight=vars.size;const sliderWidth=vars.sliderWidth;if(typeof colorFieldWidthHeight!=="number"||colorFieldWidthHeight<=0){throw new Error(`Invalid color field height: ${colorFieldWidthHeight}`)}if(typeof sliderWidth!=="number"||sliderWidth<=0){throw new Error(`Invalid slider width: ${sliderWidth}`)}const rgb=$.bsColorPicker.utils.HSVtoRGB(vars.currentHue,vars.currentSaturation,vars.currentValue);if(!rgb||typeof rgb.r!=="number"||typeof rgb.g!=="number"||typeof rgb.b!=="number"){throw new Error(`Invalid RGB values converted from HSV: ${JSON.stringify(rgb)}`)}const imageData=context.createImageData(sliderWidth,colorFieldWidthHeight);for(let y=0;y<colorFieldWidthHeight;y++){for(let x=0;x<sliderWidth;x++){const idx=(y*sliderWidth+x)*4;const isCheckerboard=(Math.floor(y/5)+Math.floor(x/5))%2===0;const baseColor=isCheckerboard?255:220;imageData.data[idx]=baseColor;imageData.data[idx+1]=baseColor;imageData.data[idx+2]=baseColor;imageData.data[idx+3]=255}}const xOffset=vars.previewSize+vars.padding+colorFieldWidthHeight+vars.padding+sliderWidth+vars.padding;context.putImageData(imageData,xOffset,0);context.save();context.globalCompositeOperation="source-over";const gradient=context.createLinearGradient(0,0,0,colorFieldWidthHeight);gradient.addColorStop(0,`rgba(${rgb.r},${rgb.g},${rgb.b},1)`);gradient.addColorStop(1,`rgba(${rgb.r},${rgb.g},${rgb.b},0)`);context.fillStyle=gradient;context.fillRect(xOffset,0,sliderWidth,colorFieldWidthHeight);context.restore()}catch(error){trigger($element,"error",error.message);console.error("Error in drawOpacitySlider:",error)}}function drawMarker($element,x,y,isSlider=false){const context=getCanvasContext($element);const vars=getVars($element);const previewSize=vars.previewSize;const size=vars.size;const padding=vars.padding;const sliderWidth=vars.sliderWidth;const totalWidth=calcTotalWidth($element);x=Math.max(previewSize+padding+(isSlider?size+padding+sliderWidth/2:6),Math.min(x,previewSize+padding+(isSlider?totalWidth-6:size-6)));y=Math.max(6,Math.min(y,size-6));context.beginPath();context.arc(x,y,6,0,2*Math.PI);context.strokeStyle="white";context.lineWidth=2;context.stroke();context.beginPath();context.arc(x,y,5,0,2*Math.PI);context.strokeStyle="black";context.lineWidth=1;context.stroke()}function getClickedArea($element,x){const vars=getVars($element);const previewSize=vars.previewSize;const padding=vars.padding;const size=vars.size;const sliderWidth=vars.sliderWidth;const totalWidth=calcTotalWidth($element);if(x>=previewSize+padding&&x<previewSize+padding+size){return"color"}if(x>=previewSize+padding+size+padding&&x<previewSize+padding+size+padding+sliderWidth){return"hue"}if(x>=previewSize+padding+size+padding+sliderWidth+padding&&x<totalWidth){return"opacity"}return null}async function handleColorAreaClick($element,pos){const settings=getSettings($element);if(settings.debug){log("Color click raw position:",pos)}const vars=getVars($element);const previewSize=vars.previewSize;const padding=vars.padding;const colorAreaX=pos.x-(previewSize+padding);const size=vars.size;const relativeY=pos.y;if(settings.debug){log("Color click calculated position:",{colorAreaX:colorAreaX,relativeY:relativeY,previewSize:previewSize,padding:padding})}const s=Math.max(0,Math.min(1,colorAreaX/size));const v=Math.max(0,Math.min(1,1-relativeY/size));setVar($element,"currentSaturation",s);setVar($element,"currentValue",v);await updateColor($element,true)}async function handleHueClick($element,pos){const vars=getVars($element);const size=vars.size;const relativeY=Math.max(0,Math.min(size-1,pos.y));const currentHue=relativeY/(size-1)*360;setVar($element,"currentHue",currentHue);await updateColor($element,true)}async function handleOpacityClick($element,pos){const vars=getVars($element);const size=vars.size;const relativeY=Math.max(0,Math.min(size-1,pos.y));const currentOpacity=1-relativeY/(size-1);setVar($element,"currentOpacity",parseFloat(currentOpacity.toFixed(2)));await updateColor($element,true)}function updateAllInputs($element,data){const $dropdown=getDropdown($element);const settings=getSettings($element);let rgba=data?data.rgba:null;const inputs={hex:`.${classInputs}[data-role="hex"]`,rgb:`.${classInputs}[data-role="rgba"]`,hsv:`.${classInputs}[data-role="hsv"]`,hsl:`.${classInputs}[data-role="hsla"]`,cmyk:`.${classInputs}[data-role="cmyk"]`};if(rgba){if(settings.debug){log("Updating all inputs for color:",rgba)}const vars=getVars($element);const hex=$.bsColorPicker.utils.RGBtoHex(rgba.r,rgba.g,rgba.b,rgba.a);const rgbString=`${rgba.r}, ${rgba.g}, ${rgba.b}, ${vars.currentOpacity.toFixed(2)}`;const hsv=$.bsColorPicker.utils.RGBtoHSV(rgba.r,rgba.g,rgba.b);const hsvString=`${Math.round(hsv.h)}, ${Math.round(hsv.s*100)}, ${Math.round(hsv.v*100)}`;const hsl=$.bsColorPicker.utils.RGBtoHSL(rgba.r,rgba.g,rgba.b);const hslString=`${Math.round(hsl.h)}, ${Math.round(hsl.s*100)}, ${Math.round(hsl.l*100)}, ${vars.currentOpacity.toFixed(2)}`;const cmyk=$.bsColorPicker.utils.RGBtoCMYK(rgba.r,rgba.g,rgba.b);const cmykString=`${cmyk.c}, ${cmyk.m}, ${cmyk.y}, ${cmyk.k}`;$dropdown.find(inputs.hex).val(hex);$dropdown.find(inputs.rgb).val(rgbString);$dropdown.find(inputs.hsv).val(hsvString);$dropdown.find(inputs.hsl).val(hslString);$dropdown.find(inputs.cmyk).val(cmykString)}else{if(settings.debug){log("Updating all inputs to null")}$dropdown.find(inputs.hex).val(null);$dropdown.find(inputs.rgb).val(null);$dropdown.find(inputs.hsv).val(null);$dropdown.find(inputs.hsl).val(null);$dropdown.find(inputs.cmyk).val(null)}}async function updateFromInput($element,$input){const value=$input.val();if($.bsColorPicker.utils.isValueEmpty(value)){$element.find("."+classInputs).val(null);updateColorToNull($element);return}const vars=getVars($element);const settings=getSettings($element);const sourceFormat=$input.attr("data-role").toLowerCase();let rgba;let hsv;let opacity=vars.currentOpacity;try{switch(sourceFormat){case"hex":rgba=$.bsColorPicker.utils.hexToRGBA(value);if(rgba.a!==undefined){opacity=rgba.a}hsv=$.bsColorPicker.utils.RGBtoHSV(rgba.r,rgba.g,rgba.b);break;case"rgba":const rgbValues=value.split(",").map(n=>parseFloat(n.trim()));if(rgbValues.length>=4){opacity=rgbValues[3];rgba={r:rgbValues[0],g:rgbValues[1],b:rgbValues[2]}}else{rgba={r:rgbValues[0],g:rgbValues[1],b:rgbValues[2]}}hsv=$.bsColorPicker.utils.RGBtoHSV(rgba.r,rgba.g,rgba.b);break;case"hsv":const[h,s,v]=value.split(",").map(n=>parseFloat(n.trim()));hsv={h:h,s:s/100,v:v/100};rgba=$.bsColorPicker.utils.HSVtoRGB(h,s/100,v/100);break;case"cmyk":const[c,m,y,k]=value.split(",").map(n=>parseFloat(n.trim()));const cmyk={c:c,m:m,y:y,k:k};rgba=$.bsColorPicker.utils.cmykToRGB(cmyk);hsv=$.bsColorPicker.utils.RGBtoHSV(rgba.r,rgba.g,rgba.b);break;case"hsla":const[hh,ss,l,a]=value.split(",").map(n=>parseFloat(n.trim()));const hsl={h:hh,s:ss/100,l:l/100};if(!isNaN(a)){opacity=a}rgba=$.bsColorPicker.utils.hslToRGB(hsl,settings.debug);hsv=$.bsColorPicker.utils.RGBtoHSV(rgba.r,rgba.g,rgba.b);break}setVar($element,"currentOpacity",parseFloat(opacity.toFixed(2)));setVar($element,"currentHue",hsv.h);setVar($element,"currentSaturation",hsv.s);setVar($element,"currentValue",hsv.v);await updateColor($element,true)}catch(e){if(settings.debug){log("Invalid format:",e)}}}setTimeout(()=>{$('[data-bs-toggle="color"],[data-toggle="color"]').bsColorPicker($.bsColorPicker.getDefaults())},0)})(jQuery);